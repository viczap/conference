{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/victorzapata/projects/personal/react/conference/pages/index.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport Menu from \"../components/Menu\";\nimport Speakers from \"../components/Speakers\";\nimport SpeakerContext from \"../components/Speakers/SpeakerContext\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nvar speakersArray = [{\n  imageSrc: \"speaker-component-1124\",\n  name: \"Douglas Crockford\",\n  id: 1124,\n  firstName: \"Douglas\",\n  lastName: \"Crockford\",\n  sat: true,\n  sun: false,\n  isFavorite: false,\n  bio: \"Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.\"\n}, {\n  imageSrc: \"speaker-component-1530\",\n  name: \"Tamara Baker\",\n  id: 1530,\n  firstName: \"Tamara\",\n  lastName: \"Baker\",\n  sat: false,\n  sun: true,\n  isFavorite: true,\n  bio: \"Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.\"\n}, {\n  imageSrc: \"speaker-component-10803\",\n  name: \"Eugene Chuvyrov\",\n  id: 10803,\n  firstName: \"Eugene\",\n  lastName: \"Chuvyrov\",\n  sat: true,\n  sun: false,\n  isFavorite: false,\n  bio: \"Eugene Chuvyrov is  a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.\"\n}];\n\nvar IndexPage = function IndexPage() {\n  _s();\n\n  useEffect(function () {\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(\"http://localhost:4000/speakers\");\n\n              case 2:\n                result = _context.sent;\n                setSpeakers(result.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchData();\n  }, []);\n\n  var _useState = useState([]),\n      speakers = _useState[0],\n      setSpeakers = _useState[1];\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(SpeakerContext.Provider, {\n      value: [speakers, setSpeakers],\n      children: /*#__PURE__*/_jsxDEV(Speakers, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(IndexPage, \"7PUkuFz57YROXIQQhr06gU1saeU=\");\n\n_c = IndexPage;\nexport default IndexPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"sources":["/Users/victorzapata/projects/personal/react/conference/pages/index.jsx"],"names":["Header","Footer","Menu","Speakers","SpeakerContext","useEffect","useState","axios","speakersArray","imageSrc","name","id","firstName","lastName","sat","sun","isFavorite","bio","IndexPage","fetchData","get","result","setSpeakers","data","speakers"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAMC,aAAa,GAAG,CAClB;AACIC,EAAAA,QAAQ,EAAE,wBADd;AAEIC,EAAAA,IAAI,EAAE,mBAFV;AAGIC,EAAAA,EAAE,EAAE,IAHR;AAIIC,EAAAA,SAAS,EAAE,SAJf;AAKIC,EAAAA,QAAQ,EAAE,WALd;AAMIC,EAAAA,GAAG,EAAE,IANT;AAOIC,EAAAA,GAAG,EAAE,KAPT;AAQIC,EAAAA,UAAU,EAAE,KARhB;AASIC,EAAAA,GAAG,EACC;AAVR,CADkB,EAalB;AACIR,EAAAA,QAAQ,EAAE,wBADd;AAEIC,EAAAA,IAAI,EAAE,cAFV;AAGIC,EAAAA,EAAE,EAAE,IAHR;AAIIC,EAAAA,SAAS,EAAE,QAJf;AAKIC,EAAAA,QAAQ,EAAE,OALd;AAMIC,EAAAA,GAAG,EAAE,KANT;AAOIC,EAAAA,GAAG,EAAE,IAPT;AAQIC,EAAAA,UAAU,EAAE,IARhB;AASIC,EAAAA,GAAG,EACC;AAVR,CAbkB,EAyBlB;AACIR,EAAAA,QAAQ,EAAE,yBADd;AAEIC,EAAAA,IAAI,EAAE,iBAFV;AAGIC,EAAAA,EAAE,EAAE,KAHR;AAIIC,EAAAA,SAAS,EAAE,QAJf;AAKIC,EAAAA,QAAQ,EAAE,UALd;AAMIC,EAAAA,GAAG,EAAE,IANT;AAOIC,EAAAA,GAAG,EAAE,KAPT;AAQIC,EAAAA,UAAU,EAAE,KARhB;AASIC,EAAAA,GAAG,EACC;AAVR,CAzBkB,CAAtB;;AAuCA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA;;AACpBb,EAAAA,SAAS,CAAC,YAAM;AAEZ,QAAMc,SAAS;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOZ,KAAK,CAACa,GAAN,CAAU,gCAAV,CADP;;AAAA;AACRC,gBAAAA,MADQ;AAEdC,gBAAAA,WAAW,CAACD,MAAM,CAACE,IAAR,CAAX;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAATJ,SAAS;AAAA;AAAA;AAAA,OAAf;;AAKAA,IAAAA,SAAS;AAEZ,GATQ,EASN,EATM,CAAT;;AADoB,kBAYYb,QAAQ,CAAC,EAAD,CAZpB;AAAA,MAYbkB,QAZa;AAAA,MAYHF,WAZG;;AAapB,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,aAFJ,eAGI,QAAC,cAAD,CAAgB,QAAhB;AAAyB,MAAA,KAAK,EAAE,CAACE,QAAD,EAAWF,WAAX,CAAhC;AAAA,6BACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,aAHJ,eAMI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,aANJ;AAAA,kBADJ;AAUH,CAvBD;;GAAMJ,S;;KAAAA,S;AAyBN,eAAeA,SAAf","sourcesContent":["import Header from \"../components/Header\";\nimport Footer from \"../components/Footer\";\nimport Menu from \"../components/Menu\";\nimport Speakers from \"../components/Speakers\";\nimport SpeakerContext from \"../components/Speakers/SpeakerContext\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nconst speakersArray = [\n    {\n        imageSrc: \"speaker-component-1124\",\n        name: \"Douglas Crockford\",\n        id: 1124,\n        firstName: \"Douglas\",\n        lastName: \"Crockford\",\n        sat: true,\n        sun: false,\n        isFavorite: false,\n        bio:\n            \"Douglas Crockford discovered the JSON Data Interchange Format. He is also the author of _JavaScript: The Good Parts_. He has been called a guru, but he is actually more of a mahatma.\",\n    },\n    {\n        imageSrc: \"speaker-component-1530\",\n        name: \"Tamara Baker\",\n        id: 1530,\n        firstName: \"Tamara\",\n        lastName: \"Baker\",\n        sat: false,\n        sun: true,\n        isFavorite: true,\n        bio:\n            \"Tammy has held a number of executive and management roles over the past 15 years, including VP engineering Roles at Molekule Inc., Cantaloupe Systems, E-Color, and Untangle Inc.\",\n    },\n    {\n        imageSrc: \"speaker-component-10803\",\n        name: \"Eugene Chuvyrov\",\n        id: 10803,\n        firstName: \"Eugene\",\n        lastName: \"Chuvyrov\",\n        sat: true,\n        sun: false,\n        isFavorite: false,\n        bio:\n            \"Eugene Chuvyrov is  a Senior Cloud Architect at Microsoft. He works directly with both startups and enterprises to enable their solutions in Microsoft cloud, and to make Azure better as a result of this work with partners.\",\n    },\n];\n\nconst IndexPage = () => {\n    useEffect(() => {\n        \n        const fetchData = async () => {\n            const result = await axios.get(\"http://localhost:4000/speakers\");\n            setSpeakers(result.data);\n        };\n\n        fetchData();\n\n    }, []);\n\n    const [speakers, setSpeakers] = useState([]);\n    return (\n        <>\n            <Header />\n            <Menu />\n            <SpeakerContext.Provider value={[speakers, setSpeakers]}>\n                <Speakers />\n            </SpeakerContext.Provider>\n            <Footer />\n        </>\n    );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}