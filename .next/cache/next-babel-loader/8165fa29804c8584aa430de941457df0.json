{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_ALL_SUCCESS, PUT_FAILURE, PUT_SUCCESS, UPDATE_STATUS, GET_ALL_FAILURE } from \"../\";\nexport var REQUEST_STATUS = {\n  LOADING: \"loading\",\n  SUCCESS: \"success\",\n  ERROR: \"error\"\n};\nexport var requestReducer = function requestReducer(state, action) {\n  switch (action.type) {\n    case GET_ALL_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: action.records,\n        status: REQUEST_STATUS.SUCCESS\n      });\n\n    case UPDATE_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: action.status\n      });\n\n    case GET_ALL_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: REQUEST_STATUS.ERROR,\n        error: action.error\n      });\n\n    case PUT_SUCCESS:\n      var records = state.records;\n      var record = action.record;\n      var recordIndex = records.map(function (r) {\n        return r.id;\n      }).indexOf(record.id);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        records: [].concat(_toConsumableArray(records.slice(0, recordIndex)), [record], _toConsumableArray(records.slice(recordIndex + 1)))\n      });\n\n    case PUT_FAILURE:\n      console.log(\"PUT_FAILURE: Currently just logging to console without refreshing records...\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/victorzapata/projects/personal/react/conference/reducers/request.js"],"names":["GET_ALL_SUCCESS","PUT_FAILURE","PUT_SUCCESS","UPDATE_STATUS","GET_ALL_FAILURE","REQUEST_STATUS","LOADING","SUCCESS","ERROR","requestReducer","state","action","type","records","status","error","record","recordIndex","map","r","id","indexOf","slice","console","log"],"mappings":";;;;;;;AAAA,SACIA,eADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,aAJJ,EAKIC,eALJ,QAMO,KANP;AAQA,OAAO,IAAMC,cAAc,GAAG;AAC1BC,EAAAA,OAAO,EAAE,SADiB;AAE1BC,EAAAA,OAAO,EAAE,SAFiB;AAG1BC,EAAAA,KAAK,EAAE;AAHmB,CAAvB;AAMP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKZ,eAAL;AACI,6CACOU,KADP;AAEIG,QAAAA,OAAO,EAAEF,MAAM,CAACE,OAFpB;AAGIC,QAAAA,MAAM,EAAET,cAAc,CAACE;AAH3B;;AAKJ,SAAKJ,aAAL;AACI,6CAAYO,KAAZ;AAAmBI,QAAAA,MAAM,EAAEH,MAAM,CAACG;AAAlC;;AACJ,SAAKV,eAAL;AACI,6CACOM,KADP;AAEII,QAAAA,MAAM,EAAET,cAAc,CAACG,KAF3B;AAGIO,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAHlB;;AAKJ,SAAKb,WAAL;AAAA,UACYW,OADZ,GACwBH,KADxB,CACYG,OADZ;AAAA,UAEYG,MAFZ,GAEuBL,MAFvB,CAEYK,MAFZ;AAGI,UAAMC,WAAW,GAAGJ,OAAO,CAACK,GAAR,CAAY,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAT;AAAA,OAAZ,EAAyBC,OAAzB,CAAiCL,MAAM,CAACI,EAAxC,CAApB;AACA,6CACOV,KADP;AAEIG,QAAAA,OAAO,+BACAA,OAAO,CAACS,KAAR,CAAc,CAAd,EAAiBL,WAAjB,CADA,IAEHD,MAFG,sBAGAH,OAAO,CAACS,KAAR,CAAcL,WAAW,GAAG,CAA5B,CAHA;AAFX;;AAQJ,SAAKhB,WAAL;AACIsB,MAAAA,OAAO,CAACC,GAAR,CACI,8EADJ;AAGA,6CACOd,KADP;AAEIK,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAFlB;;AAIJ;AACI,aAAOL,KAAP;AApCR;AAsCH,CAvCM","sourcesContent":["import {\n    GET_ALL_SUCCESS,\n    PUT_FAILURE,\n    PUT_SUCCESS,\n    UPDATE_STATUS,\n    GET_ALL_FAILURE,\n} from \"../\";\n\nexport const REQUEST_STATUS = {\n    LOADING: \"loading\",\n    SUCCESS: \"success\",\n    ERROR: \"error\",\n};\n\nexport const requestReducer = (state, action) => {\n    switch (action.type) {\n        case GET_ALL_SUCCESS:\n            return {\n                ...state,\n                records: action.records,\n                status: REQUEST_STATUS.SUCCESS,\n            };\n        case UPDATE_STATUS:\n            return { ...state, status: action.status };\n        case GET_ALL_FAILURE:\n            return {\n                ...state,\n                status: REQUEST_STATUS.ERROR,\n                error: action.error,\n            };\n        case PUT_SUCCESS:\n            const { records } = state;\n            const { record } = action;\n            const recordIndex = records.map((r) => r.id).indexOf(record.id);\n            return {\n                ...state,\n                records: [\n                    ...records.slice(0, recordIndex),\n                    record,\n                    ...records.slice(recordIndex + 1),\n                ],\n            };\n        case PUT_FAILURE:\n            console.log(\n                \"PUT_FAILURE: Currently just logging to console without refreshing records...\"\n            );\n            return {\n                ...state,\n                error: action.error,\n            };\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}